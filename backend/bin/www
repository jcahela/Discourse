#!/usr/bin/env node
const { port } = require('../config');
const app = require('../app');
const db = require('../db/models');
const { createServer } = require("http");
const { Server } = require("socket.io");
const { storeMessage, editMessage } = require("../routes/socket")

const httpServer = createServer(app);

const io = new Server(httpServer, {
  cors: {
    origin: 'http://localhost:3000',
    methods: ["GET", "POST", "PATCH", "DELETE"]
  }
});

io.on("connection", socket => {
  console.log('THIS IS THIS SOCKET ID ------->', socket.id)

  socket.on('message', async (message) => {
    const storedMessage = await storeMessage(message);
    io.emit('receive-message', storedMessage)
  });

  socket.on('message-edit', async (message) => {
    const editedMessage = await editMessage(message);
    io.emit('receive-message-edit', editedMessage)
  })
})

// Check the database connection before starting the app
db.sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection success! Sequelize is ready to use...');

    // Start listening for connections
    httpServer.listen(port, () => console.log(`Listening on port ${port}...`));
  })
  .catch((err) => {
    console.log('Database connection failure.');
    console.error(err);
  });
